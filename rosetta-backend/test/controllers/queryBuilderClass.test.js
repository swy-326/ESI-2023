// Generated by CodiumAI

describe('QueryBuilder', () => {

    // can create an instance of QueryBuilder
    it('should create an instance of QueryBuilder', () => {
        const queryBuilder = new QueryBuilder();
        expect(queryBuilder).toBeInstanceOf(QueryBuilder);
    });

    // can add a single attribute to the query
    it('should add a single attribute to the query', () => {
        const queryBuilder = new QueryBuilder();
        queryBuilder.with('attribute', 'kind', 'value');
        expect(queryBuilder.build()).toEqual([{ attribute: { kind: 'value' } }]);
    });

    // can add multiple attributes to the query
    it('should add multiple attributes to the query', () => {
        const queryBuilder = new QueryBuilder();
        queryBuilder.with('attribute1', 'kind1', 'value1');
        queryBuilder.with('attribute2', 'kind2', 'value2');
        expect(queryBuilder.build()).toEqual([
            { attribute1: { kind1: 'value1' } },
            { attribute2: { kind2: 'value2' } },
        ]);
    });

    // can handle adding undefined or null value to the query
    it('should handle adding undefined or null value to the query', () => {
        const queryBuilder = new QueryBuilder();
        queryBuilder.with('attribute', 'kind', undefined);
        queryBuilder.with('attribute', 'kind', null);
        expect(queryBuilder.build()).toEqual([]);
    });

    // can handle adding empty attribute to the query
    it('should handle adding empty attribute to the query', () => {
        const queryBuilder = new QueryBuilder();
        queryBuilder.with('', 'kind', 'value');
        expect(queryBuilder.build()).toEqual([]);
    });

    // can handle adding empty kind to the query
    it('should handle adding empty kind to the query', () => {
        const queryBuilder = new QueryBuilder();
        queryBuilder.with('attribute', '', 'value');
        expect(queryBuilder.build()).toEqual([]);
    });

    // can add multiple values to a single attribute
    it('should add multiple values to a single attribute when called with different values', () => {
        const queryBuilder = new QueryBuilder();
        queryBuilder.with('attribute', 'kind1', 'value1');
        queryBuilder.with('attribute', 'kind2', 'value2');
        queryBuilder.with('attribute', 'kind3', 'value3');
        const result = queryBuilder.build();
        expect(result).toEqual([{
                attribute: {
                    kind1: 'value1',
                },
            },
            {
                attribute: {
                    kind2: 'value2',
                },
            },
            {
                attribute: {
                    kind3: 'value3',
                },
            },
        ]);
    });

    // can check if the query is empty
    it('should return true when the query is empty', () => {
        const queryBuilder = new QueryBuilder();
        expect(queryBuilder.isEmpty()).toBe(true);
    });

    // can handle adding empty value to the query
    it('should handle adding empty value to the query', () => {
        const queryBuilder = new QueryBuilder();
        const result = queryBuilder.with('attribute', 'kind', undefined).build();
        expect(result).toEqual([]);
    });

    // can handle adding non-string kind to the query
    it('should handle adding non-string kind to the query', () => {
        const queryBuilder = new QueryBuilder();
        const attribute = 'age';
        const kind = 10;
        const value = 20;

        const result = queryBuilder.with(attribute, kind, value).build();

        expect(result).toEqual([{ age: { 10: 20 } }]);
    });

    // can handle adding non-string value to the query
    it('should handle adding non-string value to the query', () => {
        const queryBuilder = new QueryBuilder();
        const value = 123;
        const result = queryBuilder.with('attribute', 'kind', value).build();
        expect(result).toEqual([{ attribute: { kind: value } }]);
    });

    // can handle adding duplicate attributes to the query
    it('should handle adding duplicate attributes to the query', () => {
        const queryBuilder = new QueryBuilder();

        // Add duplicate attributes to the query
        queryBuilder.with('attribute', 'kind', 'value1')
            .with('attribute', 'kind', 'value2')
            .with('attribute', 'kind', 'value3');

        // Check if the query contains all the duplicate attributes
        expect(queryBuilder.build()).toEqual([{
                attribute: {
                    kind: 'value1'
                }
            },
            {
                attribute: {
                    kind: 'value2'
                }
            },
            {
                attribute: {
                    kind: 'value3'
                }
            }
        ]);
    });

    // can handle adding attributes with different kinds to the query
    it('should add attributes with different kinds to the query', () => {
        const queryBuilder = new QueryBuilder();
        const attribute = 'name';
        const kind1 = 'equals';
        const value1 = 'John';
        const kind2 = 'contains';
        const value2 = 'Doe';

        queryBuilder.with(attribute, kind1, value1);
        queryBuilder.with(attribute, kind2, value2);

        const expectedQuery = [{
                [attribute]: {
                    [kind1]: value1
                }
            },
            {
                [attribute]: {
                    [kind2]: value2
                }
            }
        ];

        expect(queryBuilder.build()).toEqual(expectedQuery);
    });

    // can handle adding attributes with different kinds and values to the query
    it('should add attributes with different kinds and values to the query', () => {
        const queryBuilder = new QueryBuilder();

        queryBuilder.with('name', 'equals', 'John');
        queryBuilder.with('age', 'greaterThan', 25);
        queryBuilder.with('isActive', 'isTrue', true);

        const query = queryBuilder.build();

        expect(query).toEqual([{
                name: {
                    equals: 'John'
                }
            },
            {
                age: {
                    greaterThan: 25
                }
            },
            {
                isActive: {
                    isTrue: true
                }
            }
        ]);
    });
});