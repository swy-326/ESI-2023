// Generated by CodiumAI

describe('LandingPage', () => {

    // Renders the landing page with all components and sections
    it('should render the landing page with all components and sections', () => {
      // Arrange
      const div = document.createElement('div');
  
      // Act
      ReactDOM.render(<LandingPage />, div);
  
      // Assert
      expect(div.innerHTML).toContain('Topbar');
      expect(div.innerHTML).toContain('Dialog');
      expect(div.innerHTML).toContain('Banner');
      expect(div.innerHTML).toContain('Container');
      expect(div.innerHTML).toContain('Image');
      expect(div.innerHTML).toContain('Button');
      expect(div.innerHTML).toContain('Input');
    });

    // Displays a dialog for login when clicking on the "Entrar" button
    it('should display a login dialog when clicking on the "Entrar" button', () => {
      // Arrange
      const div = document.createElement('div');
      ReactDOM.render(<LandingPage />, div);
      const entrarButton = div.querySelector('.bg-secundary.bg-secundary-hover');
  
      // Act
      entrarButton.click();
  
      // Assert
      const dialog = div.querySelector('.bg-secondary-500');
      expect(dialog).toBeTruthy();
    });

    // Allows the user to input email and password in the login dialog
    it('should allow the user to input email and password in the login dialog', () => {
      // Arrange
      const div = document.createElement('div');
      ReactDOM.render(<LandingPage />, div);
      const entrarButton = div.querySelector('.bg-secundary.bg-secundary-hover');
      entrarButton.click();
      const emailInput = div.querySelector('#email');
      const passwordInput = div.querySelector('#password');
  
      // Act
      emailInput.value = 'test@example.com';
      passwordInput.value = 'password123';
  
      // Assert
      expect(emailInput.value).toBe('test@example.com');
      expect(passwordInput.value).toBe('password123');
    });

    // Displays an error message when the login credentials are incorrect
    it('should display an error message when the login credentials are incorrect', () => {
      // Arrange
      const div = document.createElement('div');
      ReactDOM.render(<LandingPage />, div);
      const entrarButton = div.querySelector('.bg-secundary.bg-secundary-hover');
      entrarButton.click();
      const emailInput = div.querySelector('#email');
      const passwordInput = div.querySelector('#password');
  
      // Act
      emailInput.value = 'test@example.com';
      passwordInput.value = 'wrongpassword';
      const loginButton = div.querySelector('.bg-primary-500.text-lg.font-bold');
      loginButton.click();
  
      // Assert
      expect(window.alert).toHaveBeenCalledWith('Usuário ou Senha Incorretas');
    });

    // Does not allow the user to login without inputting email and password
    it('should not allow the user to login without inputting email and password', () => {
      // Arrange
      const div = document.createElement('div');
      ReactDOM.render(<LandingPage />, div);
      const entrarButton = div.querySelector('.bg-secundary.bg-secundary-hover');
      entrarButton.click();
      const loginButton = div.querySelector('.bg-primary-500.text-lg.font-bold');
  
      // Act
      loginButton.click();
  
      // Assert
      expect(window.alert).toHaveBeenCalledWith('Usuário ou Senha Incorretas');
    });

    // Sends a POST request to the backend when clicking on the "Entrar" button in the login dialog
    it('should send a POST request to the backend when clicking on the "Entrar" button in the login dialog', () => {
      // Arrange
      const mockFetch = jest.fn(() =>
        Promise.resolve({
          json: () =>
            Promise.resolve({
              token: "mockToken"
            })
        })
      );
      global.fetch = mockFetch;
      const mockNavigate = jest.fn();
      const mockSetIsOpen = jest.fn();
      const mockSetEmail = jest.fn();
      const mockSetPassword = jest.fn();
      const mockChangeEvent = {
        target: {
          value: "mockValue"
        }
      };
      const mockEvent = {
        preventDefault: jest.fn()
      };
      const mockLocalStorage = {
        setItem: jest.fn()
      };
      global.localStorage = mockLocalStorage;

      // Act
      render(<LandingPage />);
      fireEvent.click(screen.getByText("Entrar"));
      fireEvent.change(screen.getByPlaceholderText("Digite seu email"), mockChangeEvent);
      fireEvent.change(screen.getByPlaceholderText("Digite sua senha"), mockChangeEvent);
      fireEvent.click(screen.getByText("Entrar"));

      // Assert
      expect(mockFetch).toHaveBeenCalledWith("http://localhost:3000/api/auth/login", {
        method: "POST",
        body: JSON.stringify({ email: "mockValue", password: "mockValue" }),
        headers: { "Content-Type": "application/json" }
      });
      expect(mockNavigate).toHaveBeenCalledWith("/perfil");
      expect(mockSetIsOpen).toHaveBeenCalledWith(false);
      expect(mockSetEmail).toHaveBeenCalledWith("");
      expect(mockSetPassword).toHaveBeenCalledWith("");
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith("token", "mockToken");
    });

    // Allows the user to click on the "Ver tradutores" button
    it('should allow the user to click on the "Ver tradutores" button', () => {
      // Arrange
      const navigateMock = jest.fn();
      const useStateMock = jest.spyOn(React, 'useState');
      useStateMock.mockImplementation((initialValue) => [initialValue, jest.fn()]);
      const useNavigateMock = jest.spyOn(useNavigate, 'default');
      useNavigateMock.mockReturnValue(navigateMock);
      const div = document.createElement('div');

      // Act
      ReactDOM.render(<LandingPage />, div);
      const button = div.querySelector('button');
      button.click();

      // Assert
      expect(navigateMock).toHaveBeenCalledWith('/perfil');
    });

    // Handles errors and exceptions when sending the POST request to the backend
    it('should handle errors and exceptions when sending the POST request to the backend', () => {
      // Arrange
      const mockFetch = jest.fn();
      global.fetch = mockFetch;
      const mockNavigate = jest.fn();
      const mockSetIsOpen = jest.fn();
      const mockSetEmail = jest.fn();
      const mockSetPassword = jest.fn();
      const mockChangeEvent = { target: { value: "test" } };
      const mockResponse = { error: "Invalid credentials" };
      const mockLocalStorage = {
        setItem: jest.fn(),
      };
      global.localStorage = mockLocalStorage;

      // Act
      render(<LandingPage />);
      fireEvent.click(screen.getByText("Entrar"));

      // Assert
      expect(mockFetch).toHaveBeenCalledWith("http://localhost:3000/api/auth/login", {
        method: "POST",
        body: JSON.stringify({ email: "test", password: "test" }),
        headers: { "Content-Type": "application/json" },
      });
      expect(mockFetch).toHaveBeenCalledTimes(1);

      mockFetch.mockResolvedValueOnce({ json: jest.fn().mockResolvedValueOnce(mockResponse) });

      await waitFor(() => {
        expect(screen.getByText("Usuário ou Senha Incorretas")).toBeInTheDocument();
      });

      expect(mockLocalStorage.setItem).not.toHaveBeenCalled();

      mockFetch.mockResolvedValueOnce({ json: jest.fn().mockResolvedValueOnce({ token: "testToken" }) });

      fireEvent.click(screen.getByText("Entrar"));

      await waitFor(() => {
        expect(mockLocalStorage.setItem).toHaveBeenCalledWith("token", "testToken");
        expect(mockNavigate).toHaveBeenCalledWith("/perfil");
      });
    });
});
