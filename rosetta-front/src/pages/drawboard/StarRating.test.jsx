// Generated by CodiumAI

describe('StarRating', () => {

    // Renders 5 star buttons with white color by default
    it('should render 5 star buttons with white color by default', () => {
      // Arrange
      const wrapper = mount(<StarRating />);
  
      // Assert
      expect(wrapper.find('button')).toHaveLength(5);
      expect(wrapper.find('button').at(0).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(1).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(2).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(3).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(4).find('MdStar').prop('color')).toBe('white');
    });

    // When a star button is clicked, it changes its color to yellow and all previous star buttons also change their color to yellow
    it('should change the color of the clicked star button and all previous star buttons to yellow when clicked', () => {
      // Arrange
      const wrapper = mount(<StarRating />);
  
      // Act
      wrapper.find('button').at(2).simulate('click');
  
      // Assert
      expect(wrapper.find('button').at(0).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(1).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(2).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(3).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(4).find('MdStar').prop('color')).toBe('white');
    });

    // When the mouse hovers over a star button, it and all previous star buttons change their color to yellow
    it('should change the color of the hovered star button and all previous star buttons to yellow when hovered', () => {
      // Arrange
      const wrapper = mount(<StarRating />);
  
      // Act
      wrapper.find('button').at(2).simulate('mouseenter');
  
      // Assert
      expect(wrapper.find('button').at(0).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(1).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(2).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(3).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(4).find('MdStar').prop('color')).toBe('white');
    });

    // When rating state is 0, no star button is yellow
    it('should not change the color of any star button when rating state is 0', () => {
      // Arrange
      const wrapper = mount(<StarRating />);
  
      // Assert
      expect(wrapper.find('button').at(0).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(1).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(2).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(3).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(4).find('MdStar').prop('color')).toBe('white');
    });

    // When rating state is greater than 0, the first rating number of star buttons are yellow
    it('should change the color of the first rating number of star buttons to yellow when rating state is greater than 0', () => {
      // Arrange
      const wrapper = mount(<StarRating />);
  
      // Act
      wrapper.setState({ rating: 3 });
  
      // Assert
      expect(wrapper.find('button').at(0).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(1).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(2).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(3).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(4).find('MdStar').prop('color')).toBe('white');
    });

    // When rating state is greater than 0 and less than 5, the remaining star buttons are white
    it('should change the color of the remaining star buttons to white when rating state is greater than 0 and less than 5', () => {
      // Arrange
      const wrapper = mount(<StarRating />);
  
      // Act
      wrapper.setState({ rating: 3 });
  
      // Assert
      expect(wrapper.find('button').at(0).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(1).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(2).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(3).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(4).find('MdStar').prop('color')).toBe('white');
    });

    // When a star button is clicked, it sets the rating state to the index of the clicked button
    it('should set the rating state to the index of the clicked button when a star button is clicked', () => {
      // Arrange
      const wrapper = mount(<StarRating />);

      // Act
      wrapper.find('button').at(2).simulate('click');

      // Assert
      expect(wrapper.find('button').at(0).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(1).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(2).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(3).find('MdStar').prop('color')).toBe('white');
      expect(wrapper.find('button').at(4).find('MdStar').prop('color')).toBe('white');
    });

    // When the mouse leaves a star button, it and all previous star buttons return to their previous color
    it('should return star buttons to previous color when mouse leaves', () => {
      // Arrange
      const wrapper = mount(<StarRating />);
      const starButtons = wrapper.find('button');

      // Act
      starButtons.at(0).simulate('mouseenter');
      starButtons.at(1).simulate('mouseenter');
      starButtons.at(2).simulate('mouseenter');
      starButtons.at(3).simulate('mouseenter');
      starButtons.at(4).simulate('mouseenter');
      starButtons.at(4).simulate('mouseleave');

      // Assert
      expect(starButtons.at(0).find('MdStar').prop('color')).toBe('yellow');
      expect(starButtons.at(1).find('MdStar').prop('color')).toBe('yellow');
      expect(starButtons.at(2).find('MdStar').prop('color')).toBe('yellow');
      expect(starButtons.at(3).find('MdStar').prop('color')).toBe('yellow');
      expect(starButtons.at(4).find('MdStar').prop('color')).toBe('white');
    });

    // When rating state is 5, all star buttons are yellow
    it('should render all star buttons as yellow when rating state is 5', () => {
      // Arrange
      const wrapper = mount(<StarRating />);
      wrapper.setState({ rating: 5 });

      // Assert
      expect(wrapper.find('button')).toHaveLength(5);
      expect(wrapper.find('button').at(0).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(1).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(2).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(3).find('MdStar').prop('color')).toBe('yellow');
      expect(wrapper.find('button').at(4).find('MdStar').prop('color')).toBe('yellow');
    });
});
