// Generated by CodiumAI

describe('Orders', () => {

    // Renders the component without crashing
    it('should render the component without crashing', () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);
    });

    // Fetches orders from the API and displays them
    it('should fetch orders from the API and display them', async () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn().mockResolvedValueOnce([{ id: 1, title: 'Order 1' }, { id: 2, title: 'Order 2' }]),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);

      // Wait for the orders to be fetched and displayed
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Check if the orders are displayed correctly
      expect(div.querySelectorAll('.order-item')).toHaveLength(2);
    });

    // Filters orders based on selected tags, languages, and price
    it('should filter orders based on selected tags, languages, and price', async () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn().mockResolvedValueOnce([{ id: 1, title: 'Order 1' }, { id: 2, title: 'Order 2' }]),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);

      // Wait for the orders to be fetched and displayed
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Simulate selecting tags, languages, and price
      const selectTags = div.querySelector('.select-tags');
      const selectLanguages = div.querySelector('.select-languages');
      const inputPrice = div.querySelector('.input-price');
      selectTags.value = 'WORK_PROJECT';
      selectLanguages.value = 'ENGLISH';
      inputPrice.value = 50;
      fireEvent.change(selectTags);
      fireEvent.change(selectLanguages);
      fireEvent.change(inputPrice);

      // Click the filter button
      const filterButton = div.querySelector('.filter-button');
      fireEvent.click(filterButton);

      // Wait for the orders to be filtered and displayed
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Check if the orders are filtered correctly
      expect(div.querySelectorAll('.order-item')).toHaveLength(1);
    });

    // Displays a loader while fetching orders
    it('should display a loader while fetching orders', () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);

      // Assert that the loader is displayed
      const loader = div.querySelector('.fixed.inset-0.bg-black/70.flex.items-center.justify-center');
      expect(loader).toBeInTheDocument();
    });

    // Navigates to the order details page when an order is clicked
    it('should navigate to order details page when an order is clicked', () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
        useNavigate: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Mock data
      const orders = [
        {
          id: 1,
          user: {
            avatar: 'avatar_url',
          },
          main_language: 'English',
          languages: ['English', 'Spanish'],
          tags: ['Work Project', 'Video'],
          title: 'Order 1',
        },
        {
          id: 2,
          user: {
            avatar: 'avatar_url',
          },
          main_language: 'Spanish',
          languages: ['Spanish', 'Portuguese'],
          tags: ['Book'],
          title: 'Order 2',
        },
      ];

      // Mock functions
      const fetchOrdersMock = jest.fn().mockResolvedValue({ json: () => orders });
      const waitMock = jest.fn().mockResolvedValue();

      // Mock HttpClient
      jest.mock('../../services/http/api', () => ({
        fetchOrders: fetchOrdersMock,
      }));

      // Mock wait function
      jest.mock('./Orders', () => ({
        wait: waitMock,
      }));

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);

      // Simulate order click
      const orderLink = div.querySelector('a');
      fireEvent.click(orderLink);

      // Assertions
      expect(fetchOrdersMock).toHaveBeenCalledTimes(1);
      expect(fetchOrdersMock).toHaveBeenCalledWith();
      expect(waitMock).toHaveBeenCalledTimes(1);
      expect(waitMock).toHaveBeenCalledWith(1000);
    });

    // Handles empty orders response from the API
    it('should handle empty orders response from the API', async () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn().mockResolvedValue({ json: jest.fn().mockResolvedValue([]) }),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);

      // Wait for the component to finish rendering
      await act(async () => {
        await new Promise((resolve) => setTimeout(resolve, 0));
      });

      // Assert that the component handles empty orders response correctly
      expect(div.querySelector('.max-w-7xl.mx-auto.mt-10.flex.flex-col.gap-8')).toBeEmptyDOMElement();
    });

    // Handles empty selected tags and languages
    it('should handle empty selected tags and languages', () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);

      // Assertions
      // Verify that the component renders without crashing
      expect(ReactDOM.render).toHaveBeenCalled();
    });

    // Handles errors when fetching orders from the API
    it('should handle errors when fetching orders from the API', async () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn().mockRejectedValue(new Error('Failed to fetch orders')),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const { container } = render(<Orders />);

      // Assert that loading spinner is displayed
      expect(container.querySelector('.bg-black/70')).toBeInTheDocument();

      // Wait for the error message to be displayed
      await waitFor(() => {
        expect(screen.getByText('Failed to fetch orders')).toBeInTheDocument();
      });

      // Assert that loading spinner is no longer displayed
      expect(container.querySelector('.bg-black/70')).not.toBeInTheDocument();
    });

    // Handles errors when filtering orders
    it('should handle errors when filtering orders', async () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Mock HttpClient.fetchOrders to throw an error
      HttpClient.fetchOrders = jest.fn().mockRejectedValue(new Error('Failed to fetch orders'));

      // Render the component
      const { container } = render(<Orders />);

      // Wait for the fetchOrders function to be called
      await waitFor(() => expect(HttpClient.fetchOrders).toHaveBeenCalled());

      // Check if the error message is displayed
      expect(container.textContent).toContain('Failed to fetch orders');
    });

    // Displays the selected tags and languages in the filter section
    it('should display the selected tags and languages in the filter section', () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);

      // Assert the selected tags and languages are displayed in the filter section
      expect(div.innerHTML).toContain('Selected Tags');
      expect(div.innerHTML).toContain('Selected Languages');
    });

    // Displays a message when there are no orders matching the selected filters
    it('should display a message when there are no orders matching the selected filters', () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);

      // Assert that the message is displayed when there are no orders matching the selected filters
      expect(div.textContent).toContain("No orders matching the selected filters");
    });

    // Displays the selected price in the filter section
    it('should display the selected price in the filter section', () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);

      // Get the range input element
      const rangeInput = div.querySelector('input[type="range"]');

      // Set the value of the range input
      rangeInput.value = '50';
  
      // Trigger a change event on the range input
      const changeEvent = new Event('change');
      rangeInput.dispatchEvent(changeEvent);

      // Get the displayed price element
      const displayedPrice = div.querySelector('p');

      // Check if the displayed price matches the selected price
      expect(displayedPrice.textContent).toBe('R$: 50');
    });

    // Handles invalid selected price
    it('should handle invalid selected price when fetching filters', async () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Set up initial state
      const initialState = {
        isLoading: false,
        orders: [],
        selectedTags: null,
        selectedLanguages: null,
        selectedPrice: 0,
      };

      // Render the component
      const { container } = render(<Orders />, { initialState });

      // Set up mock functions and data
      const fetchOrdersMock = jest.spyOn(HttpClient, 'fetchOrders');
      fetchOrdersMock.mockResolvedValueOnce({
        json: jest.fn().mockResolvedValueOnce([]),
      });

      // Trigger the fetchFilter function
      await act(async () => {
        fireEvent.click(screen.getByText('Filtrar'));
      });

      // Check if the fetchOrders function was called with the correct query
      expect(fetchOrdersMock).toHaveBeenCalledWith('price=0');

      // Check if the isLoading state is set to true
      expect(container.querySelector('.bg-black/70')).toBeInTheDocument();

      // Check if the isLoading state is set to false after waiting for 1 second
      await waitFor(() => {
        expect(container.querySelector('.bg-black/70')).not.toBeInTheDocument();
      });

      // Check if the orders state is updated with the fetched orders
      expect(container.querySelectorAll('.order-item')).toHaveLength(0);
    });

    // Displays a message when there are no orders to display
    it('should display a message when there are no orders to display', () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component with no orders
      const { getByText } = render(<Orders />);
  
      // Assert that the message is displayed
      expect(getByText('No orders to display')).toBeInTheDocument();
    });

    // Resets the filter when the "Filtrar" button is clicked again
    it('should reset the filter when the "Filtrar" button is clicked again', () => {
      // Mock dependencies
      jest.mock('../../components', () => ({
        Button: jest.fn(),
        Container: jest.fn(),
        Topbar: jest.fn(),
      }));
      jest.mock('react-tailwindcss-select', () => ({
        default: jest.fn(),
      }));
      jest.mock('../../components/common/OrderItem/OrderItem', () => jest.fn());
      jest.mock('../../services/http/api', () => ({
        fetchOrders: jest.fn(),
      }));
      jest.mock('react-router-dom', () => ({
        Link: jest.fn(),
      }));
      jest.mock('react-spinners/ClipLoader', () => ({
        default: jest.fn(),
      }));

      // Import the component
      const Orders = require('./Orders').default;

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<Orders />, div);

      // Simulate selecting filters
      const selectTags = div.querySelector('Select');
      const selectLanguages = div.querySelectorAll('Select')[1];
      const inputPrice = div.querySelector('input[type="range"]');
      selectTags.props.onChange([{ value: 'WORK_PROJECT', label: 'Trabalho' }]);
      selectLanguages.props.onChange([{ value: 'ENGLISH', label: 'Inglẽs' }]);
      inputPrice.value = 50;
      fireEvent.change(inputPrice);

      // Simulate clicking the "Filtrar" button
      const button = div.querySelector('Button');
      fireEvent.click(button);

      // Check if the filters are reset
      expect(selectTags.props.value).toBe(null);
      expect(selectLanguages.props.value).toBe(null);
      expect(inputPrice.value).toBe('0');
    });
});
