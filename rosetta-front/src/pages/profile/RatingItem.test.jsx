// Generated by CodiumAI

describe('RatingItem', () => {

    // Renders the rating value and count correctly
    it('should render the correct rating value and count', () => {
      const { getByText } = render(<RatingItem value={3} count={5} total={10} />);
      expect(getByText('3 estrelas (5 avaliações)')).toBeInTheDocument();
    });

    // Calculates the width of the rating bar correctly
    it('should calculate the correct width of the rating bar', () => {
      const { container } = render(<RatingItem value={3} count={5} total={10} />);
      const ratingBar = container.querySelector('.block');
      expect(ratingBar.style.width).toBe('50%');
    });

    // Renders the rating bar with the correct width
    it('should render the rating bar with the correct width', () => {
      const { container } = render(<RatingItem value={3} count={5} total={10} />);
      const ratingBar = container.querySelector('.block');
      expect(ratingBar).toHaveStyle('width: 50%');
    });

    // Handles case where count is 0
    it('should handle the case where count is 0', () => {
      const { getByText } = render(<RatingItem value={3} count={0} total={10} />);
      expect(getByText('3 estrelas (0 avaliações)')).toBeInTheDocument();
    });

    // Handles case where total is 0
    it('should handle the case where total is 0', () => {
      const { getByText } = render(<RatingItem value={3} count={5} total={0} />);
      expect(getByText('3 estrelas (5 avaliações)')).toBeInTheDocument();
    });

    // Handles case where value is not a number
    it('should handle the case where value is not a number', () => {
      const { getByText } = render(<RatingItem value="3" count={5} total={10} />);
      expect(getByText('NaN estrelas (5 avaliações)')).toBeInTheDocument();
    });

    // Handles case where value is negative
    it('should render the correct rating value and count when value is negative', () => {
      const { getByText } = render(<RatingItem value={-2} count={5} total={10} />);
      expect(getByText('-2 estrelas (5 avaliações)')).toBeInTheDocument();
    });

    // Handles case where width is greater than 100
    it('should handle case where width is greater than 100', () => {
      const { getByText } = render(<RatingItem value={4} count={8} total={5} />);
      const ratingText = getByText('4 estrelas (8 avaliações)');
      const ratingBar = getByTestId('rating-bar');

      expect(ratingText).toBeInTheDocument();
      expect(ratingBar).toHaveStyle('width: 100%');
    });

    // Handles case where width is less than 0
    it('should handle case where width is less than 0', () => {
      const { getByText, container } = render(<RatingItem value={3} count={5} total={10} />);
  
      const width = (5 / 10) * 100;
      const style = {
        width: `${width}%`
      };
  
      expect(getByText('3 estrelas (5 avaliações)')).toBeInTheDocument();
      expect(container.querySelector('.block')).toHaveStyle(`width: ${style.width}`);
    });
});
