// Generated by CodiumAI

describe('CreateOrder', () => {

    // Renders the form with all necessary inputs and selects
    it('should render the form with all necessary inputs and selects', () => {
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);
      const form = div.querySelector('form');
      const titleInput = div.querySelector('input[id="name"]');
      const tagsSelect = div.querySelector('div[class="w-1/2 mb-4"] select');
      const mainLanguageSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:first-child');
      const languagesSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:last-child');
      const descriptionTextarea = div.querySelector('textarea');
      const fileInput = div.querySelector('input[type="file"]');
      const priceInput = div.querySelector('input[type="range"]');
      const submitButton = div.querySelector('button[type="submit"]');

      expect(form).toBeInTheDocument();
      expect(titleInput).toBeInTheDocument();
      expect(tagsSelect).toBeInTheDocument();
      expect(mainLanguageSelect).toBeInTheDocument();
      expect(languagesSelect).toBeInTheDocument();
      expect(descriptionTextarea).toBeInTheDocument();
      expect(fileInput).toBeInTheDocument();
      expect(priceInput).toBeInTheDocument();
      expect(submitButton).toBeInTheDocument();

      ReactDOM.unmountComponentAtNode(div);
    });

    // Allows the user to select multiple tags and languages
    it('should allow the user to select multiple tags and languages', () => {
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);
      const tagsSelect = div.querySelector('div[class="w-1/2 mb-4"] select');
      const languagesSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:last-child');

      // Simulate selecting multiple tags
      fireEvent.change(tagsSelect, { target: { value: ['tag1', 'tag2'] } });
      expect(tagsSelect.value).toEqual(['tag1', 'tag2']);

      // Simulate selecting multiple languages
      fireEvent.change(languagesSelect, { target: { value: ['language1', 'language2'] } });
      expect(languagesSelect.value).toEqual(['language1', 'language2']);

      ReactDOM.unmountComponentAtNode(div);
    });

    // Allows the user to select a main language
    it('should allow the user to select a main language', () => {
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);
      const mainLanguageSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:first-child');

      // Simulate selecting a main language
      fireEvent.change(mainLanguageSelect, { target: { value: 'mainLanguage' } });
      expect(mainLanguageSelect.value).toEqual('mainLanguage');

      ReactDOM.unmountComponentAtNode(div);
    });

    // Submits the form with empty fields and displays error messages
    it('should submit the form with empty fields and display error messages', () => {
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);
      const form = div.querySelector('form');
      const submitButton = div.querySelector('button[type="submit"]');

      // Submit the form with empty fields
      fireEvent.submit(form);
      expect(submitButton).toBeDisabled();
      expect(div.textContent).toContain('Please fill out this field');

      ReactDOM.unmountComponentAtNode(div);
    });

    // Allows the user to upload multiple files
    it('should render the form with all necessary inputs and selects', () => {
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);
      const form = div.querySelector('form');
      const titleInput = div.querySelector('input[id="name"]');
      const tagsSelect = div.querySelector('div[class="w-1/2 mb-4"] select');
      const mainLanguageSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:first-child');
      const languagesSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:last-child');
      const descriptionTextarea = div.querySelector('textarea');
      const fileInput = div.querySelector('input[type="file"]');
      const priceInput = div.querySelector('input[type="range"]');
      const submitButton = div.querySelector('button[type="submit"]');

      expect(form).toBeInTheDocument();
      expect(titleInput).toBeInTheDocument();
      expect(tagsSelect).toBeInTheDocument();
      expect(mainLanguageSelect).toBeInTheDocument();
      expect(languagesSelect).toBeInTheDocument();
      expect(descriptionTextarea).toBeInTheDocument();
      expect(fileInput).toBeInTheDocument();
      expect(priceInput).toBeInTheDocument();
      expect(submitButton).toBeInTheDocument();

      ReactDOM.unmountComponentAtNode(div);
    });

    // Allows the user to set a price for the order
    it('should render the form with a price input', () => {
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);
      const priceInput = div.querySelector('input[type="range"]');
      expect(priceInput).toBeInTheDocument();
      ReactDOM.unmountComponentAtNode(div);
    });

    // Submits the form and creates a new order when all required fields are filled
    it('should submit the form and create a new order when all required fields are filled', () => {
      // Mock dependencies and setup
      const mockNavigate = jest.fn();
      const mockFetch = jest.fn();
      const mockFormData = jest.fn();
      const mockLocalStorageGetItem = jest.fn();
      const mockUseNavigate = jest.spyOn(require('react-router-dom'), 'useNavigate').mockReturnValue(mockNavigate);
      jest.spyOn(require('react'), 'useState').mockImplementation((initialValue) => [initialValue, jest.fn()]);
      jest.spyOn(require('react-hook-form'), 'useForm').mockReturnValue({
        register: jest.fn(),
        handleSubmit: jest.fn((callback) => callback),
        watch: jest.fn(),
      });
      jest.spyOn(require('react-tailwindcss-select'), 'default').mockReturnValue(jest.fn());
      jest.spyOn(require('react'), 'useContext').mockReturnValue({ avatar: null });
      jest.spyOn(require('react'), 'useEffect').mockImplementation((callback) => callback());
      jest.spyOn(require('react'), 'useMemo').mockReturnValueOnce([{ value: 'tag1' }, { value: 'tag2' }]);
      jest.spyOn(require('../../static/languages'), 'default').mockReturnValue([{ value: 'language1' }, { value: 'language2' }]);
      jest.spyOn(require('../../components'), 'Topbar').mockReturnValue(<div />);
      jest.spyOn(require('react-dom'), 'render').mockImplementation((component, container) => {
        ReactDOM.render(component, container);
        return container.firstChild;
      });
      jest.spyOn(require('react-dom'), 'unmountComponentAtNode').mockImplementation((container) => {
        ReactDOM.unmountComponentAtNode(container);
      });
      jest.spyOn(global, 'fetch').mockImplementation(mockFetch);
      global.FormData = mockFormData;
      global.localStorage = { getItem: mockLocalStorageGetItem };

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);

      // Fill in the form fields
      const titleInput = div.querySelector('input[id="name"]');
      const tagsSelect = div.querySelector('div[class="w-1/2 mb-4"] select');
      const mainLanguageSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:first-child');
      const languagesSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:last-child');
      const descriptionTextarea = div.querySelector('textarea');
      const fileInput = div.querySelector('input[type="file"]');
      const priceInput = div.querySelector('input[type="range"]');
      const submitButton = div.querySelector('button[type="submit"]');

      titleInput.value = 'Test Title';
      tagsSelect.value = 'tag1';
      mainLanguageSelect.value = 'language1';
      languagesSelect.value = ['language1', 'language2'];
      descriptionTextarea.value = 'Test Description';
      fileInput.files = ['file1', 'file2'];
      priceInput.value = 50;

      // Submit the form
      submitButton.click();

      // Assertions
      expect(mockFormData).toHaveBeenCalledTimes(1);
      expect(mockFormData).toHaveBeenCalledWith();
      expect(mockFormData().append).toHaveBeenCalledTimes(6);
      expect(mockFormData().append).toHaveBeenCalledWith('title', 'Test Title');
      expect(mockFormData().append).toHaveBeenCalledWith('tags', 'tag1');
      expect(mockFormData().append).toHaveBeenCalledWith('main_language', 'language1');
      expect(mockFormData().append).toHaveBeenCalledWith('languages', 'language1,language2');
      expect(mockFormData().append).toHaveBeenCalledWith('description', 'Test Description');
      expect(mockFormData().append).toHaveBeenCalledWith('files', 'file1');
      expect(mockFormData().append).toHaveBeenCalledWith('files', 'file2');
      expect(mockLocalStorageGetItem).toHaveBeenCalledTimes(1);
      expect(mockLocalStorageGetItem).toHaveBeenCalledWith('token');
      expect(mockFetch).toHaveBeenCalledTimes(1);
      expect(mockFetch).toHaveBeenCalledWith('http://localhost:3000/api/orders/create', {
        body: mockFormData(),
        method: 'POST',
        headers: {
          Authorization: 'Bearer null',
        },
      });
      expect(mockNavigate).toHaveBeenCalledTimes(1);
      expect(mockNavigate).toHaveBeenCalledWith('/pedidos');

      // Clean up
      ReactDOM.unmountComponentAtNode(div);
      mockUseNavigate.mockRestore();
    });

    // Submits the form with invalid file types and displays error messages
    it('should submit the form with invalid file types and display error messages', () => {
      // Mock the necessary dependencies and functions
      const navigateMock = jest.fn();
      const useFormMock = jest.spyOn(require('react-hook-form'), 'useForm');
      useFormMock.mockReturnValue({
        register: jest.fn(),
        handleSubmit: jest.fn((callback) => callback),
        watch: jest.fn(),
      });
      const setSelectedTagsMock = jest.fn();
      const setSelectedLanguagesMock = jest.fn();
      const setSelectedMainLanguageMock = jest.fn();
      const useStateMock = jest.spyOn(require('react'), 'useState');
      useStateMock.mockImplementation((initialValue) => [initialValue, jest.fn()]);

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);

      // Fill in the form inputs
      const titleInput = div.querySelector('input[id="name"]');
      fireEvent.change(titleInput, { target: { value: 'Test Title' } });

      const tagsSelect = div.querySelector('div[class="w-1/2 mb-4"] select');
      fireEvent.change(tagsSelect, { target: { value: 'tag1' } });

      const mainLanguageSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:first-child');
      fireEvent.change(mainLanguageSelect, { target: { value: 'language1' } });

      const languagesSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:last-child');
      fireEvent.change(languagesSelect, { target: { value: ['language2', 'language3'] } });

      const descriptionTextarea = div.querySelector('textarea');
      fireEvent.change(descriptionTextarea, { target: { value: 'Test Description' } });

      const fileInput = div.querySelector('input[type="file"]');
      const file1 = new File(['file1'], 'file1.txt', { type: 'text/plain' });
      const file2 = new File(['file2'], 'file2.txt', { type: 'text/plain' });
      Object.defineProperty(fileInput, 'files', {
        value: [file1, file2],
      });
      fireEvent.change(fileInput);

      const priceInput = div.querySelector('input[type="range"]');
      fireEvent.change(priceInput, { target: { value: 50 } });

      // Submit the form
      const submitButton = div.querySelector('button[type="submit"]');
      fireEvent.click(submitButton);

      // Assert the form submission
      expect(fetch).toHaveBeenCalledWith('http://localhost:3000/api/orders/create', {
        body: expect.any(FormData),
        method: 'POST',
        headers: {
          Authorization: 'Bearer null',
        },
      });

      // Assert the navigation
      expect(navigateMock).toHaveBeenCalledWith('/pedidos');

      // Clean up
      ReactDOM.unmountComponentAtNode(div);
      useFormMock.mockRestore();
      useStateMock.mockRestore();
    });

    // Submits the form with a price outside the range and displays error messages
    it('should submit the form with a price outside the range and display error messages', () => {
      // Mock the necessary dependencies and setup the initial state
      const navigateMock = jest.fn();
      const useStateMock = jest.spyOn(React, 'useState');
      useStateMock.mockImplementation((initialValue) => [initialValue, jest.fn()]);
      const useFormMock = jest.spyOn(ReactHookForm, 'useForm');
      useFormMock.mockReturnValue({
        register: jest.fn(),
        handleSubmit: jest.fn((callback) => callback),
        watch: jest.fn(),
      });
      const setSelectedMainLanguageMock = jest.fn();
      const setSelectedTagsMock = jest.fn();
      const setSelectedLanguagesMock = jest.fn();
      const setSelectedMainLanguage = jest.spyOn(React, 'useState');
      setSelectedMainLanguage.mockImplementation((initialValue) => [initialValue, setSelectedMainLanguageMock]);
      const setSelectedTags = jest.spyOn(React, 'useState');
      setSelectedTags.mockImplementation((initialValue) => [initialValue, setSelectedTagsMock]);
      const setSelectedLanguages = jest.spyOn(React, 'useState');
      setSelectedLanguages.mockImplementation((initialValue) => [initialValue, setSelectedLanguagesMock]);
      const useNavigateMock = jest.spyOn(ReactRouterDOM, 'useNavigate');
      useNavigateMock.mockReturnValue(navigateMock);

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);

      // Simulate form submission with a price outside the range
      const form = div.querySelector('form');
      const priceInput = div.querySelector('input[type="range"]');
      const submitButton = div.querySelector('button[type="submit"]');
      fireEvent.change(priceInput, { target: { value: 150 } });
      fireEvent.submit(form);

      // Assert the expected behavior
      expect(navigateMock).not.toHaveBeenCalled();
      expect(setSelectedMainLanguageMock).not.toHaveBeenCalled();
      expect(setSelectedTagsMock).not.toHaveBeenCalled();
      expect(setSelectedLanguagesMock).not.toHaveBeenCalled();

      // Clean up
      ReactDOM.unmountComponentAtNode(div);
      useStateMock.mockRestore();
      useFormMock.mockRestore();
      setSelectedMainLanguage.mockRestore();
      setSelectedTags.mockRestore();
      setSelectedLanguages.mockRestore();
      useNavigateMock.mockRestore();
    });

    // Allows the user to edit the form inputs before submitting
    it('should allow the user to edit the form inputs before submitting', () => {
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);
      const form = div.querySelector('form');
      const titleInput = div.querySelector('input[id="name"]');
      const tagsSelect = div.querySelector('div[class="w-1/2 mb-4"] select');
      const mainLanguageSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:first-child');
      const languagesSelect = div.querySelector('div[class="w-full grid grid-cols-2 gap-x-6 mb-4"] select:last-child');
      const descriptionTextarea = div.querySelector('textarea');
      const fileInput = div.querySelector('input[type="file"]');
      const priceInput = div.querySelector('input[type="range"]');
      const submitButton = div.querySelector('button[type="submit"]');

      expect(form).toBeInTheDocument();
      expect(titleInput).toBeInTheDocument();
      expect(tagsSelect).toBeInTheDocument();
      expect(mainLanguageSelect).toBeInTheDocument();
      expect(languagesSelect).toBeInTheDocument();
      expect(descriptionTextarea).toBeInTheDocument();
      expect(fileInput).toBeInTheDocument();
      expect(priceInput).toBeInTheDocument();
      expect(submitButton).toBeInTheDocument();

      ReactDOM.unmountComponentAtNode(div);
    });

    // Allows the user to cancel the form submission and return to the orders page
    it('should cancel the form submission and return to the orders page when the cancel button is clicked', () => {
      // Mock the useNavigate hook
      const mockNavigate = jest.fn();
      jest.mock('react-router-dom', () => ({
        useNavigate: () => mockNavigate,
      }));

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);

      // Simulate clicking the cancel button
      const cancelButton = div.querySelector('button[type="button"]');
      fireEvent.click(cancelButton);

      // Expect the navigate function to be called with the correct path
      expect(mockNavigate).toHaveBeenCalledWith('/pedidos');

      // Clean up
      ReactDOM.unmountComponentAtNode(div);
    });

    // Displays a loading spinner while creating a new order
    it('should display a loading spinner while creating a new order', () => {
      // Mock the necessary dependencies and functions
      const mockUseNavigate = jest.fn();
      const mockSetSelectedTags = jest.fn();
      const mockSetSelectedLanguages = jest.fn();
      const mockSetSelectedMainLanguage = jest.fn();
      const mockHandleSubmit = jest.fn();
      const mockWatch = jest.fn().mockReturnValue(50);

      // Mock the useState hook
      jest.spyOn(React, 'useState').mockImplementation((initialValue) => {
        if (initialValue === []) {
          return [[], mockSetSelectedTags];
        } else if (initialValue === null) {
          return [null, mockSetSelectedMainLanguage];
        } else {
          return [[], mockSetSelectedLanguages];
        }
      });

      // Mock the useForm hook
      jest.spyOn(ReactHookForm, 'useForm').mockReturnValue({
        register: jest.fn(),
        handleSubmit: mockHandleSubmit,
        watch: mockWatch,
      });

      // Mock the useNavigate hook
      jest.spyOn(ReactRouterDOM, 'useNavigate').mockReturnValue(mockUseNavigate);

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);

      // Get the submit button
      const submitButton = div.querySelector('button[type="submit"]');

      // Simulate form submission
      fireEvent.click(submitButton);

      // Check if the loading spinner is displayed
      expect(div.querySelector('.loading-spinner')).toBeInTheDocument();

      // Check if the create order function is called
      expect(mockHandleCreateOrder).toHaveBeenCalled();

      // Check if the navigation function is called
      expect(mockUseNavigate).toHaveBeenCalledWith('/pedidos');

      // Clean up
      ReactDOM.unmountComponentAtNode(div);
    });

    // Displays a confirmation message after creating a new order
    it('should display a confirmation message after creating a new order', () => {
      // Mock the necessary dependencies and setup the initial state
      const navigateMock = jest.fn();
      const useStateMock = jest.spyOn(React, 'useState');
      useStateMock.mockImplementation((initialValue) => [initialValue, setValueMock]);
      const setValueMock = jest.fn();
      const useFormMock = jest.spyOn(ReactHookForm, 'useForm');
      useFormMock.mockReturnValue({
        register: jest.fn(),
        handleSubmit: jest.fn((callback) => callback),
        watch: jest.fn(),
      });
      const fetchMock = jest.spyOn(window, 'fetch');
      fetchMock.mockResolvedValueOnce({});

      // Render the component
      const div = document.createElement('div');
      ReactDOM.render(<CreateOrder />, div);

      // Simulate form submission
      const form = div.querySelector('form');
      fireEvent.submit(form);

      // Assert the expected behavior
      expect(fetchMock).toHaveBeenCalledWith('http://localhost:3000/api/orders/create', {
        body: expect.any(FormData),
        method: 'POST',
        headers: {
          Authorization: 'Bearer token',
        },
      });
      expect(navigateMock).toHaveBeenCalledWith('/pedidos');

      // Clean up
      ReactDOM.unmountComponentAtNode(div);
    });
});
